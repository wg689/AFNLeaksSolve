'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _rcEditorCore = require('rc-editor-core');

var _createMention = require('./createMention');

var _createMention2 = _interopRequireDefault(_createMention);

var _exportContent = require('./exportContent');

var _exportContent2 = _interopRequireDefault(_exportContent);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/*eslint-disable*/
console.error = function () {
  var error = console.error;
  return function (exception) {
    if ((exception + '').indexOf('Warning: A component is `contentEditable`') != 0) {
      error.apply(console, arguments);
    }
  };
}();
/*eslint-enable*/

var Mention = function (_React$Component) {
  _inherits(Mention, _React$Component);

  function Mention(props) {
    _classCallCheck(this, Mention);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.onEditorChange = function (editorState) {
      if (_this.props.onChange) {
        _this.props.onChange(editorState, (0, _exportContent2["default"])(editorState));
      }
    };

    _this.onFocus = function () {
      if (_this.props.onFocus) {
        _this.props.onFocus();
      }
    };

    _this.onBlur = function () {
      if (_this.props.onBlur) {
        _this.props.onBlur();
      }
    };

    _this.reset = function () {
      _this.refs.editor.Reset();
    };

    _this.state = {
      suggestions: props.suggestions,
      value: props.value
    };
    _this.mention = (0, _createMention2["default"])({
      prefix: props.prefix,
      tag: props.tag,
      mode: props.mode
    });
    _this.Suggestions = _this.mention.Suggestions;
    _this.plugins = [_this.mention];

    if (typeof props.defaultValue === 'string') {
      console.warn('The property `defaultValue` now allow `EditorState` only, see http://react-component.github.io/editor-mention/examples/defaultValue.html ');
    }
    if (props.value !== undefined) {
      _this.controlledMode = true;
    }
    return _this;
  }

  Mention.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var suggestions = nextProps.suggestions;
    var value = nextProps.value;

    this.setState({
      suggestions: suggestions,
      value: value
    });
  };

  Mention.prototype.render = function render() {
    var _classnames;

    var _props = this.props;
    var prefixCls = _props.prefixCls;
    var style = _props.style;
    var prefix = _props.prefix;
    var tag = _props.tag;
    var mode = _props.mode;
    var multiLines = _props.multiLines;
    var suggestionStyle = _props.suggestionStyle;
    var placeholder = _props.placeholder;
    var defaultValue = _props.defaultValue;
    var className = _props.className;
    var notFoundContent = _props.notFoundContent;
    var suggestions = this.state.suggestions;
    var Suggestions = this.Suggestions;

    var editorClass = (0, _classnames3["default"])(className, (_classnames = {}, _defineProperty(_classnames, prefixCls + '-wrapper', true), _defineProperty(_classnames, 'multilines', multiLines), _classnames));
    var editorCoreProps = this.controlledMode ? { value: this.state.value } : {};
    var defaultValueState = typeof defaultValue === 'string' ? (0, _rcEditorCore.toEditorState)(defaultValue) : defaultValue;
    return _react2["default"].createElement(
      'div',
      { className: editorClass, style: style, ref: 'wrapper' },
      _react2["default"].createElement(
        _rcEditorCore.EditorCore,
        _extends({
          ref: 'editor',
          prefixCls: prefixCls,
          style: style,
          multiLines: multiLines,
          plugins: this.plugins,
          defaultValue: defaultValueState,
          placeholder: placeholder,
          onFocus: this.onFocus,
          onBlur: this.onBlur,
          onChange: this.onEditorChange
        }, editorCoreProps),
        _react2["default"].createElement(Suggestions, {
          mode: tag ? 'immutable' : 'mutable',
          prefix: prefix,
          prefixCls: prefixCls,
          style: suggestionStyle,
          notFoundContent: notFoundContent,
          suggestions: suggestions,
          onSearchChange: this.props.onSearchChange,
          onSelect: this.props.onSelect
        })
      )
    );
  };

  return Mention;
}(_react2["default"].Component);

Mention.propTypes = {
  value: _react2["default"].PropTypes.object,
  suggestions: _react2["default"].PropTypes.array,
  prefix: _react2["default"].PropTypes.string,
  prefixCls: _react2["default"].PropTypes.string,
  tag: _react2["default"].PropTypes.element,
  style: _react2["default"].PropTypes.object,
  className: _react2["default"].PropTypes.string,
  onSearchChange: _react2["default"].PropTypes.func,
  onChange: _react2["default"].PropTypes.func,
  mode: _react2["default"].PropTypes.string,
  multiLines: _react2["default"].PropTypes.bool,
  suggestionStyle: _react2["default"].PropTypes.object,
  placeholder: _react2["default"].PropTypes.string,
  defaultValue: _react2["default"].PropTypes.object,
  notFoundContent: _react2["default"].PropTypes.any,
  position: _react2["default"].PropTypes.string,
  onFocus: _react2["default"].PropTypes.func,
  onBlur: _react2["default"].PropTypes.func,
  onSelect: _react2["default"].PropTypes.func
};
Mention.controlledMode = false;


Mention.defaultProps = {
  prefixCls: 'rc-editor-mention',
  prefix: '@',
  mode: 'immutable',
  multiLines: false,
  className: '',
  suggestionStyle: {},
  notFoundContent: '无法找到',
  position: 'absolute'
};

exports["default"] = Mention;
module.exports = exports['default'];